// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: if/bapid.proto

#include "if/bapid.pb.h"
#include "if/bapid.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace bapid {

static const char* BapidService_method_names[] = {
  "/bapid.BapidService/Ping",
  "/bapid.BapidService/Shutdown",
};

std::unique_ptr< BapidService::Stub> BapidService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< BapidService::Stub> stub(new BapidService::Stub(channel, options));
  return stub;
}

BapidService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Ping_(BapidService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Shutdown_(BapidService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status BapidService::Stub::Ping(::grpc::ClientContext* context, const ::bapid::PingRequest& request, ::bapid::PingReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bapid::PingRequest, ::bapid::PingReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Ping_, context, request, response);
}

void BapidService::Stub::async::Ping(::grpc::ClientContext* context, const ::bapid::PingRequest* request, ::bapid::PingReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bapid::PingRequest, ::bapid::PingReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Ping_, context, request, response, std::move(f));
}

void BapidService::Stub::async::Ping(::grpc::ClientContext* context, const ::bapid::PingRequest* request, ::bapid::PingReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Ping_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bapid::PingReply>* BapidService::Stub::PrepareAsyncPingRaw(::grpc::ClientContext* context, const ::bapid::PingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bapid::PingReply, ::bapid::PingRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Ping_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bapid::PingReply>* BapidService::Stub::AsyncPingRaw(::grpc::ClientContext* context, const ::bapid::PingRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPingRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BapidService::Stub::Shutdown(::grpc::ClientContext* context, const ::bapid::Empty& request, ::bapid::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bapid::Empty, ::bapid::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Shutdown_, context, request, response);
}

void BapidService::Stub::async::Shutdown(::grpc::ClientContext* context, const ::bapid::Empty* request, ::bapid::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bapid::Empty, ::bapid::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Shutdown_, context, request, response, std::move(f));
}

void BapidService::Stub::async::Shutdown(::grpc::ClientContext* context, const ::bapid::Empty* request, ::bapid::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Shutdown_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bapid::Empty>* BapidService::Stub::PrepareAsyncShutdownRaw(::grpc::ClientContext* context, const ::bapid::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bapid::Empty, ::bapid::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Shutdown_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bapid::Empty>* BapidService::Stub::AsyncShutdownRaw(::grpc::ClientContext* context, const ::bapid::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncShutdownRaw(context, request, cq);
  result->StartCall();
  return result;
}

BapidService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BapidService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BapidService::Service, ::bapid::PingRequest, ::bapid::PingReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BapidService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bapid::PingRequest* req,
             ::bapid::PingReply* resp) {
               return service->Ping(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BapidService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BapidService::Service, ::bapid::Empty, ::bapid::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BapidService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bapid::Empty* req,
             ::bapid::Empty* resp) {
               return service->Shutdown(ctx, req, resp);
             }, this)));
}

BapidService::Service::~Service() {
}

::grpc::Status BapidService::Service::Ping(::grpc::ServerContext* context, const ::bapid::PingRequest* request, ::bapid::PingReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BapidService::Service::Shutdown(::grpc::ServerContext* context, const ::bapid::Empty* request, ::bapid::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace bapid

